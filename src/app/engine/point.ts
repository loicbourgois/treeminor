import { Color } from './color';
import { Vector } from './vector';
import { Utils } from './utils';

export class Point {

  private position: Vector;
  private speed: Vector;
  private radius: number;
  private color: Color;
  private mass: number;
  private acceleration: Vector;
  private DISTANCE_TOLERANCE = 0.01;

  constructor(point: any) {
    this.loadConfiguration(point);
  }

  loadConfiguration(configuration: any) {
    const point = Utils.getCheckedConfiguration(configuration);
    this.position = new Vector(point.position);
    this.speed = new Vector(point.speed);
    this.radius = (point.radius !== undefined) ? point.radius : 1.0;
    this.color = new Color(point.color);
    this.mass = (point.mass !== undefined) ? point.mass : 1.0;
    this.acceleration = new Vector(point.acceleration);
    if (!this.speed.getX() && !this.speed.getY()) {
      this.speed.set(0.0, 0.0);
    }
  }

  resetAcceleration() {
    this.acceleration.set(0.0, 0.0);
  }

  //
  // Apply all the gravitational forces to a point
  // generated by all the other points.
  //
  // These forces are directly added to the point's acceleration.
  //
  applyGravity(points, delta, gravity, worldWidth, worldHeight) {
    points.forEach(point => {
      if (point !== this) {
        const fourClosestPosition = Vector.getFourClosestClones(this.position, point.position, worldWidth, worldHeight);
        if (fourClosestPosition) {
          fourClosestPosition.forEach(position => {
            const x = position.getX();
            const y = position.getY();
            const distance = Vector.getDistance(this.position, position);
            const force = distance > this.DISTANCE_TOLERANCE ? - gravity * this.mass * point.mass / (distance * distance) : 0;
            const xDelta = this.position.getX() - x;
            const yDelta = this.position.getY() - y;
            const xForce = xDelta * force;
            const yForce = yDelta * force;
            const xAcceleration = xForce / this.mass;
            const yAcceleration = yForce / this.mass;
            this.acceleration.add(xAcceleration, yAcceleration);
          });
        } else {
          // NTD
        }
      } else {
        // NTD
      }
    });
  }

  updateSpeed(delta) {
    const xSpeed = this.speed.getX() + this.acceleration.getX() * delta;
    const ySpeed = this.speed.getY() + this.acceleration.getY() * delta;
    this.speed.set(xSpeed, ySpeed);
  }

  moveWithin(delta: number, xMin: number, xMax: number, yMin: number, yMax: number) {
    let x = this.position.getX() + this.speed.getX() * delta;
    x += xMax - xMin - xMin;
    while (x > (xMax - xMin)) {
      x -= (xMax - xMin);
    }
    x += xMin;
    let y = this.position.getY() + this.speed.getY() * delta;
    y += yMax - yMin - yMin;
    while (y > (yMax - yMin)) {
      y -= (yMax - yMin);
    }
    y += yMin;
    this.position.set(x, y);
  }

  move(x: number, y: number) {
    this.position.set(this.position.getX() + x, this.position.getY() + y);
  }

  getPosition() {
    return this.position;
  }
}
